# Set working directory to Lab09 folder
setwd("C:/Users/ual-laptop/Desktop/R-545/Lab09")
# Install the tidyverse and factoextra packages.
install.packages("tidyverse")
install.packages("factoextra")
# Set the working directory to your Lab11 folder.
setwd("C:/Users/ual-laptop/OneDrive - University of Arizona/Desktop/R-545
/Lab11")
# Set the working directory to your Lab11 folder.
setwd("C:/Users/ual-laptop/OneDrive - University of Arizona/Desktop/R-545
/Lab11")
# Set the working directory to your Lab11 folder.
setwd("C:/Users/ual-laptop/OneDrive - University of Arizona/Desktop/R-545
/Lab11")
getwd
getwd()
# Set the working directory to your Lab11 folder.
setwd("C:/Users/ual-laptop/OneDrive - University of Arizona/Desktop")
# Set the working directory to your Lab11 folder.
setwd("C:/Users/ual-laptop/OneDrive - University of Arizona/Desktop/R-545/Lab11")
getwd()
# Read CountryData.csv into an object called countries.
countries <-read_csv(file = "CountryData.csv",
col_types = "cnnnnini",
col_names = TRUE)
# Read CountryData.csv into an object called countries.
countries <- read_csv(file = "CountryData.csv",
col_types = "cnnnnini",
col_names = TRUE)
# Read CountryData.csv into an object called countries.
countries <- read_csv(file = "CountryData.csv",col_types = "cnnnnini",col_names = TRUE)
library(tidyverse)
library(stats)
library(factoextra)
library(cluster)
library(gridExtra)
# Read CountryData.csv into an object called countries.
countries <- read_csv(file = "CountryData.csv",col_types = "cnnnnini",col_names = TRUE)
# Converting the column containing the country name to the row title
countries <- countries %>% column_to_rownames(var = "Country")
# Remove countries from the tibble with missing data
countries <- countries %>% drop_na()
# Summary of the countries tibble
summary(countries)
countriesScaled <- countries %>%
select(CorruptionIndex, DaysToOpenBusiness)%>%
scale()
# Set the random seed to 679.
set.seed(679)
# Generate the k-means clusters
countries4Clusters <- kmeans(x = countriesScaled,centers = 4,nstart = 25)
# Generate the k-means clusters
countries4Clusters <- kmeans(x = countriesScaled,
centers = 4,
nstart = 25)
# Display cluster sizes on the console.
print(countries4Clusters$size)
# Display cluster centers (z-scores) on the console.
print(countries4Clusters$centers)
# Visualize the clusters.
fviz_cluster(object = countries4Clusters,
data = countriesScaled,
repel = FALSE)
# Optimize the value for k by evaluating the elbow method.
fviz_nbclust(x = countriesScaled,
FUNcluster = kmeans,
method = "wss")
# Optimize the value for k by evaluating the average silhouette method.
fviz_nbclust(x = countriesScaled,
FUNcluster = kmeans,
method = "silhouette")
# Optimize the value for k by evaluating the gap statistic method.
fviz_nbclust(x = countriesScaled,
FUNcluster = kmeans,
method = "gap_stat")
# Regenerate the cluster analysis using the optimal number of clusters.
countries3Clusters <- kmeans(x = countriesScaled,
centers = 3,
nstart = 25)
# Display cluster sizes on the console.
print(countries3Clusters$size)
# Display cluster centers (z-scores) on the console.
print(countries3Clusters$centers)
# Visualize the clusters.
fviz_cluster(object = countries3Clusters,data = countriesScaled,repel = FALSE)
countries %>%
mutate(cluster = countries3Clusters$cluster) %>%
select(cluster,GiniCoefficient,GDPPerCapita,
EduPercGovSpend,EduPercGDP,CompulsoryEducationYears) %>%
group_by(cluster) %>%
summarise_all("mean")
