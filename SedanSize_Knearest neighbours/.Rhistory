print("Hello world! It's me, Anish Reddy Middela!")
Sys.time()
Sys.timezone()
input<- "Enter a positive integer"
a<-input"Enter a positive integer"
a<- input("Enter a positive integer")
print (a)
a = input("Enter a positive integer")
print (a)
a
a <- input("Enter a positive integer")
a <- input("Enter a positive integer")
print(a)
a <- readline("Enter a positive integer")
a <- readline("Enter a positive integer")
a <- readline("Enter a positive integer")
in
a <-strtoi(readline("Enter a positive integer"))
a
a <-strtoi(readline("Enter a positive integer: "))
a
a
a <-strtoi(readline("Enter a positive integer: "))
a
a <-strtoi(readline("Enter a positive integer: "))
a
?data.frame
install.packages("tidyverse")
library(tidyverse)
ggplot(data=ChickWeight) +
geom_smooth(mapping=aes(x=Time, y=weight, color=Diet))
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
vehicles <- read_csv(file = 'vehicles1.csv', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:\Users\ual-laptop\Desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:Users\ual-laptop\Desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:\users\ual-laptop\desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:users\ual-laptop\desktop', col_types = "nnnfnfffffnn")
?read.csv
vehicles <- read_csv(file = 'vehicles.csv', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:/Users/ual-laptop/Desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'vehicles.csv', col_types = "nnnfnfffffnn")
glimpse(vehicles)
summary(vehicles)
select(vehicles,drive)
select(vehicles,drive,class)
summary(select(vehicles,drive,class))
summary(select(vehicles,drive,class,cylinders))
table(select(vehicles,class))
prop.table(table(select(vehicles,class)))
summary(select(vehicles,class))
table(select(vehicles,class))
vehicles %>%
select(class) %>%
table() %>%
prop.table()
vehicles %>%
filter(drive == "2-Wheel Drive") %>%
select(co2emissions) %>%
summary()
vehicles %>%
ggplot() +
geom_boxplot(mapping = aes(x = class, y = co2emissions), fill = "red") +
labs(title = "Boxplot of C02 Emissions by Vehicle Class", x = "Class", y =
"C02 Emissions")
ggplot(data=ChickWeight) +
geom_smooth(mapping=aes(x=Time, y=weight, color=Diet))
ggplot(data=vehicles) +
geom_boxplot(mapping = aes(x = class, y = co2emissions), fill = "red") +
labs(title = "Boxplot of C02 Emissions by Vehicle Class", x = "Class", y =
"C02 Emissions")
vehicles %>%
ggplot() +
geom_boxplot(mapping = aes(x = class, y = co2emissions), fill = "red") +
labs(title = "Boxplot of C02 Emissions by Vehicle Class", x = "Class", y =
"C02 Emissions")
> vehicles %>%
vehicles %>%
ggplot() +
geom_point(mapping = aes(x = citympg, y = co2emissions), color = "blue",
size = 2) +
labs(title = "Scatterplot of CO2 Emissions vs. City Miles per Gallon",
x = "City MPG", y = "CO2 Emissions")
vehicles %>%
ggplot() +
geom_histogram(mapping = aes(x = co2emissions), bins = 30, fill =
"yellow", color = "black") +
labs(title = "Histogram of CO2 Emissions", x = "CO2 Emissions", y =
"Frequency")
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars") +
coord_flip()
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars") +
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars")
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars")
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars") +
coord_flip()
install.packages("tidyverse")
library(tidyverse)
setwd("C:\Users\ual-laptop")
setwd("C:\users\ual-laptop")
getwd()
setwd("C:/Users/ual-laptop/Documents")
getwd()
# Trevor Volpe & Anish Midella
# MIS 545-001
# Lab03Group17VolpeMidella.R
# This code imports a CSV file containing data on grocery transactions.The
# orginal tibble is altered twice, once to subset features, and another time to
# create a new feature called AveragePricePerUnit. Filters are ran to return
# certain data.A histogram of average price per unit and a boxplot of revenue
# are created
# Install and load tidyverse package
install.packages("tidyverse")
library(tidyverse)
# Set working directory to Lab03 folder
setwd("C:/Users/volpe/OneDrive/Documents/trevor college/Data Mining/Lab03")
library(tidyverse)
# Install and load dummies package from Lab04 folder
install.packages("dummies", repos = NULL, type="source")
library(dummies)
# Set working directory to Lab04 folder
setwd("C:/Users/ual-laptop/Desktop/Lab04")
# Alyssa Ann Williams & Anish Middela
# MIS 545-001
# Lab04Group03WilliamsMiddela.R
# This code imports a CSV file containing data on Automobile Tire Tread.The
# orginal tibble is altered five times,first to read the csv file ,second to
# impute missing data in UsageMonths with mean,third to normalize the skewed
# distribution using the log method and creating a new column of
# logUsageMonths,fourth to create a new column with mutate function and using
# a conditional statement to show treadDepth less than 1.6,and fifth to create
# a data frame so that we can dummy code and divide the position column into
# four new columns.A scatter plot of Miles and TreadDepth is created and
# titled as "Tire Miles and Tread Depth Scatter Plot."
# Install and load tidyverse package
install.packages("tidyverse")
library(tidyverse)
# Install and load dummies package from Lab04 folder
install.packages("dummies", repos = NULL, type="source")
library(dummies)
# Set working directory to Lab04 folder
setwd("C:/Users/ual-laptop/Desktop/Lab04")
install.packages("tidyverse")
# Install and load tidyverse package
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dummies)
install.packages("dummies", repos = NULL, type="source")
library(dummies)
setwd("C:/Users/ual-laptop/Desktop/Lab04")
install.packages("dummies", repos = NULL, type="source")
library(dummies)
install.packages("dummies", repos = NULL, type="source")
library(dummies)
setwd("C:/Users/ual-laptop/Desktop/Lab04")
tireTread1 <- read_csv(file = "TireTread.csv",
col_types = "cfnni",
col_names = TRUE)
install.packages("tidyverse")
library(tidyverse)
install.packages("dummies", repos = NULL, type="source")
library(dummies)
setwd("C:/Users/ual-laptop/Desktop/Lab04")
tireTread1 <- read_csv(file = "TireTread.csv",
col_types = "cfnni",
col_names = TRUE)
# Display the tireTread1 tibble
print(tireTread1)
install.packages("tidyverse")
library(tidyverse)
# Set working directory to Lab05 folder
setwd("C:/Users/ual-laptop/Desktop/R-545/Lab07")
sedanSize  <- read_csv(file = "SedanSize.csv",
col_types = "cfnii",
col_names = TRUE)
# Display the sedanSize tibble
print(sedanSize)
# Removing MakeModel Feature
sedanSize <- sedanSize %>% select(-MakeModel)
# Display the sedanSize tibble
print(sedanSize)
sedanSizeLabels <- sedanSize %>% select(sedanSize)
sedanSize <- sedanSize %>% select(-sedanSize)
View(sedanSize)
sedanSizeLabels <- sedanSize %>% select(SedanSize)
sedanSize <- sedanSize %>% select(-SedanSize)
displayAllHistograms <- function(tibbleDataset) {
tibbleDataset %>%
keep(is.numeric) %>%
gather() %>%
ggplot() + geom_histogram(mapping = aes(x=value,fill=key),
color = "black")+
facet_wrap( ~ key,scales= "free")+
theme_minimal()
}
# Display the histogram of the tibble
displayAllHistograms(sedanSize)
sedanSizeTraining <- sedanSize[sampleSet, ]
# Put the records from 75% training into Training tibbles
sedanSizeTraining <- sedanSize[sampleSet, ]
set.seed(517)
sampleSet <- sample(nrow(sedanSize),
round(nrow(sedanSize)*.75),
replace = FALSE)
# Put the records from 75% training into Training tibbles
sedanSizeTraining <- sedanSize[sampleSet, ]
sedanSizeTrainingLabels <- sedanSizeLabels[sampleSet, ]
sedanSizeTesting <- sedanSize[-sampleSet, ]
sedanSizeTestingLabels <- sedanSizeLabels[-sampleSet, ]
# Display the predictions from the testing data on the console
print(sedanSizePrediction)
sedanSizePrediction <- knn(train = sedanSizeTraining,
test = sedanSizeTesting,
cl = sedanSizeTrainingLabels$SedanSize,
k = 7)
# Load Class package
library(class)
sedanSizePrediction <- knn(train = sedanSizeTraining,
test = sedanSizeTesting,
cl = sedanSizeTrainingLabels$SedanSize,
k = 7)
# Display the predictions from the testing data on the console
print(sedanSizePrediction)
# Display the summary of prediction from the testing dataset
print(summary(sedanSizePrediction))
View(sedanSizeTestingLabels)
sedanSizeConfusionMatrix <- table(sedanSizeTestingLabels$SedanSize,
sedanSizePrediction)
# Display the confusion matrix
print(sedanSizeConfusionMatrix)
ve accuracy model
# Display the confusion matrix
print(sedanSizeConfusionMatrix)
# Calculate the predictive accuracy model
predictiveAccuracy <- sum(diag(sedanSizeConfusionMatrix))/
nrow(sedanSizeTesting)
# Create a Kvalue matrix along with their predictive accuracy
KValueMatrix <- matrix(data = NA,
nrow = 0,
ncol= 2)
View(KValueMatrix)
# Adding column headings
colnames(KValueMatrix) <- c("k value","Predictive Accuracy")
View(KValueMatrix)
# Display the kValue Matrix
print(KValueMatrix)
for (kValue in 1:nrow(sedanSizeTraining)){
# Calculate prdictive accuracy only if k value is odd
if (kValue %% 2 !=0) {
# Generate the Model
sedanSizePrediction <- knn(train = sedanSizeTraining,
test = sedanSizeTesting,
cl = sedanSizeTrainingLabels$SedanSize,
k = kValue)
# Generate the confusion matrix
sedanSizeConfusionMatrix <- table(sedanSizeTestingLabels$SedanSize,
sedanSizePrediction)
# Calculate the predictive accuracy
predictiveAccuracy <- sum(diag(sedanSizeConfusionMatrix))/
nrow(sedanSizeTesting)
# Adding a new row
KValueMatrix <- rbind(KValueMatrix, c(kValue,predictiveAccuracy))
}
}
# Display the kValue Matrix
print(KValueMatrix)
