print("Hello world! It's me, Anish Reddy Middela!")
Sys.time()
Sys.timezone()
input<- "Enter a positive integer"
a<-input"Enter a positive integer"
a<- input("Enter a positive integer")
print (a)
a = input("Enter a positive integer")
print (a)
a
a <- input("Enter a positive integer")
a <- input("Enter a positive integer")
print(a)
a <- readline("Enter a positive integer")
a <- readline("Enter a positive integer")
a <- readline("Enter a positive integer")
in
a <-strtoi(readline("Enter a positive integer"))
a
a <-strtoi(readline("Enter a positive integer: "))
a
a
a <-strtoi(readline("Enter a positive integer: "))
a
a <-strtoi(readline("Enter a positive integer: "))
a
?data.frame
install.packages("tidyverse")
library(tidyverse)
ggplot(data=ChickWeight) +
geom_smooth(mapping=aes(x=Time, y=weight, color=Diet))
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
vehicles <- read_csv(file = 'vehicles1.csv', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:\Users\ual-laptop\Desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:Users\ual-laptop\Desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:\users\ual-laptop\desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:users\ual-laptop\desktop', col_types = "nnnfnfffffnn")
?read.csv
vehicles <- read_csv(file = 'vehicles.csv', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'C:/Users/ual-laptop/Desktop', col_types = "nnnfnfffffnn")
vehicles <- read_csv(file = 'vehicles.csv', col_types = "nnnfnfffffnn")
glimpse(vehicles)
summary(vehicles)
select(vehicles,drive)
select(vehicles,drive,class)
summary(select(vehicles,drive,class))
summary(select(vehicles,drive,class,cylinders))
table(select(vehicles,class))
prop.table(table(select(vehicles,class)))
summary(select(vehicles,class))
table(select(vehicles,class))
vehicles %>%
select(class) %>%
table() %>%
prop.table()
vehicles %>%
filter(drive == "2-Wheel Drive") %>%
select(co2emissions) %>%
summary()
vehicles %>%
ggplot() +
geom_boxplot(mapping = aes(x = class, y = co2emissions), fill = "red") +
labs(title = "Boxplot of C02 Emissions by Vehicle Class", x = "Class", y =
"C02 Emissions")
ggplot(data=ChickWeight) +
geom_smooth(mapping=aes(x=Time, y=weight, color=Diet))
ggplot(data=vehicles) +
geom_boxplot(mapping = aes(x = class, y = co2emissions), fill = "red") +
labs(title = "Boxplot of C02 Emissions by Vehicle Class", x = "Class", y =
"C02 Emissions")
vehicles %>%
ggplot() +
geom_boxplot(mapping = aes(x = class, y = co2emissions), fill = "red") +
labs(title = "Boxplot of C02 Emissions by Vehicle Class", x = "Class", y =
"C02 Emissions")
> vehicles %>%
vehicles %>%
ggplot() +
geom_point(mapping = aes(x = citympg, y = co2emissions), color = "blue",
size = 2) +
labs(title = "Scatterplot of CO2 Emissions vs. City Miles per Gallon",
x = "City MPG", y = "CO2 Emissions")
vehicles %>%
ggplot() +
geom_histogram(mapping = aes(x = co2emissions), bins = 30, fill =
"yellow", color = "black") +
labs(title = "Histogram of CO2 Emissions", x = "CO2 Emissions", y =
"Frequency")
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars") +
coord_flip()
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars") +
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars")
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars")
vehicles %>%
ggplot() +
geom_bar(mapping = aes(x =year, fill = drive), color = "black") +
labs(title = "Stacked Bar Chart of Drive Type Composition by Year",
x = "Model Year", y = "Number of Cars") +
coord_flip()
install.packages("tidyverse")
library(tidyverse)
setwd("C:\Users\ual-laptop")
setwd("C:\users\ual-laptop")
getwd()
setwd("C:/Users/ual-laptop/Documents")
getwd()
# Trevor Volpe & Anish Midella
# MIS 545-001
# Lab03Group17VolpeMidella.R
# This code imports a CSV file containing data on grocery transactions.The
# orginal tibble is altered twice, once to subset features, and another time to
# create a new feature called AveragePricePerUnit. Filters are ran to return
# certain data.A histogram of average price per unit and a boxplot of revenue
# are created
# Install and load tidyverse package
install.packages("tidyverse")
library(tidyverse)
# Set working directory to Lab03 folder
setwd("C:/Users/volpe/OneDrive/Documents/trevor college/Data Mining/Lab03")
library(tidyverse)
# Install and load dummies package from Lab04 folder
install.packages("dummies", repos = NULL, type="source")
library(dummies)
# Set working directory to Lab04 folder
setwd("C:/Users/ual-laptop/Desktop/Lab04")
# Alyssa Ann Williams & Anish Middela
# MIS 545-001
# Lab04Group03WilliamsMiddela.R
# This code imports a CSV file containing data on Automobile Tire Tread.The
# orginal tibble is altered five times,first to read the csv file ,second to
# impute missing data in UsageMonths with mean,third to normalize the skewed
# distribution using the log method and creating a new column of
# logUsageMonths,fourth to create a new column with mutate function and using
# a conditional statement to show treadDepth less than 1.6,and fifth to create
# a data frame so that we can dummy code and divide the position column into
# four new columns.A scatter plot of Miles and TreadDepth is created and
# titled as "Tire Miles and Tread Depth Scatter Plot."
# Install and load tidyverse package
install.packages("tidyverse")
library(tidyverse)
# Install and load dummies package from Lab04 folder
install.packages("dummies", repos = NULL, type="source")
library(dummies)
# Set working directory to Lab04 folder
setwd("C:/Users/ual-laptop/Desktop/Lab04")
install.packages("tidyverse")
# Install and load tidyverse package
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dummies)
install.packages("dummies", repos = NULL, type="source")
library(dummies)
setwd("C:/Users/ual-laptop/Desktop/Lab04")
install.packages("dummies", repos = NULL, type="source")
library(dummies)
install.packages("dummies", repos = NULL, type="source")
library(dummies)
setwd("C:/Users/ual-laptop/Desktop/Lab04")
tireTread1 <- read_csv(file = "TireTread.csv",
col_types = "cfnni",
col_names = TRUE)
install.packages("tidyverse")
library(tidyverse)
install.packages("dummies", repos = NULL, type="source")
library(dummies)
setwd("C:/Users/ual-laptop/Desktop/Lab04")
tireTread1 <- read_csv(file = "TireTread.csv",
col_types = "cfnni",
col_names = TRUE)
# Display the tireTread1 tibble
print(tireTread1)
library(tidyverse)
library(corrplot)
library(olsrr)
library(smotefamily)
# Set working directory to Lab05 folder
setwd("C:/Users/ual-laptop/Desktop/Lab06")
# Set working directory to Lab05 folder
setwd("C:/Users/ual-laptop/Desktop/Lab06")
# Read CSV file into a tibble and define column types
mobilePhone <- read_csv(file = "MobilePhoneSubscribers.csv",
col_types = "lillnininn",
col_names = TRUE)
# Display the mobilePhone tibble
print(mobilePhone)
# Display the structure of the tibble
print(str(mobilePhone))
# Display the summary of the tibble
print(summary(mobilePhone))
# Creating a function to display histogram
displayAllHistograms <- function(tibbleDataset) {
tibbleDataset %>%
keep(is.numeric) %>%
gather() %>%
ggplot() + geom_histogram(mapping = aes(x=value,fill=key),
color = "black")+
facet_wrap( ~ key,scales= "free")+
theme_minimal()
}
# Display the histogram of the tibble
displayAllHistograms(mobilePhone)
# Display a correlation matrix of mobilePhone that is rounded to two decimals
round(cor(mobilePhone),digits = 2)
# Display of a correlation plot of mobilePhone with certain features
corrplot(cor(mobilePhone),
method = "number",
type = "lower")
# Display the logistic model summary
summary(mobilePhoneModel)
# Remove data plan and data usage from the mobilePhone data
mobilePhone<- subset(mobilePhone, select = -c(DataPlan,DataUsage))
# Splitting mobilephone data into training and test data sets
set.seed(203)
sampleSet <- sample(nrow(mobilePhone),
round(nrow(mobilePhone)*.75),
replace = FALSE)
mobilePhoneTest <- mobilePhone[-sampleSet, ]
mobilePhoneTraining <- mobilePhone[sampleSet, ]
# Checking for class imbalance
summary(mobilePhoneTraining$CancelledService)
# Dealing with class imbalance in training set using SMOTE function
mobilePhoneTrainingSmoted <- tibble(SMOTE(
X=data.frame(mobilePhoneTraining),
target = mobilePhoneTraining$CancelledService,
dup_size = 3)$data)
# Display the tibble after dealing with class imbalance
summary(mobilePhoneTrainingSmoted)
# Convert cancelled service and recent renewal in logical type
mobilePhoneTrainingSmoted <- mobilePhoneTrainingSmoted %>%
mutate(CancelledService = as.logical(CancelledService),
RecentRenewal = as.logical(RecentRenewal))
# Display Display the tibble after converting cancelled service
# and recent renewal in logical type
summary(mobilePhoneTrainingSmoted)
# Get rid of "class" column in tibble (added by SMOTE())
mobilePhoneTrainingSmoted <- mobilePhoneTrainingSmoted %>%
select(-class)
# Check for class imbalance in the training set
summary(mobilePhoneTrainingSmoted)
# Generate logistic regression Model
mobilePhoneModel<- glm(data=mobilePhoneTrainingSmoted, family=binomial,
formula=CancelledService ~ .)
# Display the logistic model summary
summary(mobilePhoneModel)
# Odds ratios of the independent variables
exp(coef(mobilePhoneModel)["AccountWeeks"])
exp(coef(mobilePhoneModel)["RecentRenewalTRUE"])
exp(coef(mobilePhoneModel)["CustServCalls"])
exp(coef(mobilePhoneModel)["AvgCallMinsPerMonth"])
exp(coef(mobilePhoneModel)["AvgCallsPerMonth"])
exp(coef(mobilePhoneModel)["MonthlyBill"])
exp(coef(mobilePhoneModel)["OverageFee"])
# Use the model to predict outcomes in the testing dataset
mobilePhonePrediction <- predict(mobilePhoneModel,
mobilePhoneTest,
type='response')
# Display the test model
print(mobilePhonePrediction)
# Converting less than 0.5 as 0 and greater than 0.5 as 1
mobilePhonePrediction <-
ifelse(mobilePhonePrediction >= 0.5,1,0)
# Creating a mobile phone confusion matrix
mobilePhoneConfusionMatrix <- table(mobilePhoneTest$CancelledService,
mobilePhonePrediction)
# Display confusion matrix
print(mobilePhoneConfusionMatrix)
# Display the test model
print(mobilePhonePrediction)
# Display the logistic model summary
summary(mobilePhoneModel)
corrplot(cor(mobilePhone),
method = "number",
type = "lower")
exp(coef(mobilePhoneModel)["MonthlyBill"])
# Odds ratios of the independent variables
exp(coef(mobilePhoneModel)["AccountWeeks"])
